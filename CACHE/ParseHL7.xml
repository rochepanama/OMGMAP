<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="21" zv="Cache for Windows (x86-32) 2007.1.3 (Build 607U)" ts="2013-10-07 16:47:40">
<Class name="OMGMAP.ParseHL7">
<Description>
</Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeCreated>62977,60774.370219</TimeCreated>

<Property name="fieldsMSH">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="fieldsNTE">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="fieldsPID">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="fieldsPV1">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="fieldsORC">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="fieldsOBR">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="fieldsTQ1">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="fieldsSPM">
<MultiDimensional>1</MultiDimensional>
</Property>

<UDLText name="T">
<Content><![CDATA[
// properties to store each HL7 records (MSH,NTE,PID,PV1,ORC,TQ1,SPM)

]]></Content>
</UDLText>

<Property name="recordMSH">
<Type>%String</Type>
</Property>

<Property name="recordNTE">
<Type>%String</Type>
</Property>

<Property name="recordPID">
<Type>%String</Type>
</Property>

<Property name="recordPV1">
<Type>%String</Type>
</Property>

<Property name="recordORC">
<Type>%String</Type>
</Property>

<Property name="recordOBR">
<Type>%String</Type>
</Property>

<Property name="recordTQ1">
<Type>%String</Type>
</Property>

<Property name="recordSPM">
<Type>%String</Type>
</Property>

<Property name="recordMSA">
<Type>%String</Type>
</Property>

<Property name="isHL7">
<Type>%Boolean</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// HL7 properties

]]></Content>
</UDLText>

<Property name="host">
<Type>%String</Type>
</Property>

<Property name="requestno">
<Type>%String</Type>
</Property>

<Property name="requestdatetime">
<Type>%String</Type>
</Property>

<Property name="requestdate">
<Type>%String</Type>
</Property>

<Property name="requesttime">
<Type>%String</Type>
</Property>

<Property name="priority">
<Type>%String</Type>
</Property>

<Property name="dob">
<Type>%String</Type>
</Property>

<Property name="sex">
<Type>%String</Type>
</Property>

<Property name="patientid">
<Type>%String</Type>
</Property>

<Property name="fullname">
<Type>%String</Type>
</Property>

<Property name="firstname">
<Type>%String</Type>
</Property>

<Property name="lastname">
<Type>%String</Type>
</Property>

<Property name="middlename">
<Type>%String</Type>
</Property>

<Property name="medicalservice">
<Type>%String</Type>
</Property>

<Property name="origin">
<Type>%String</Type>
</Property>

<Property name="patienttype">
<Type>%String</Type>
</Property>

<Property name="destination">
<Type>%String</Type>
</Property>

<Property name="observation">
<Type>%String</Type>
</Property>

<Property name="episode">
<Type>%String</Type>
</Property>

<Property name="doctor">
<Type>%String</Type>
</Property>

<Property name="codigodoctor">
<Type>%String</Type>
</Property>

<Property name="dx">
<Type>%String</Type>
</Property>

<Property name="bed">
<Type>%String</Type>
</Property>

<Property name="motive">
<Type>%String</Type>
</Property>

<Property name="tests">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="detmed">
<MultiDimensional>1</MultiDimensional>
</Property>

<Method name="checkHL7">
<FormalSpec>line:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// @params: 	line		.........	currently read line of the file
	//
	// @output: 	1	......	file is HL7
	// 				0 	...... 	file is not HL7
	//
	// @desc: 		Checks the first line read to see if file is HL7 First character
	// 				must be the letter "H" 
	
	set rectype = $piece(line,"|",1)

	if (rectype = "MSH")	{ 	quit 1 	}
	else 				{	quit 0 	}
]]></Implementation>
</Method>

<Method name="getTimeStamp">
<Implementation><![CDATA[
	// @desc: 		Get current timestamp in YYYYMMDDHHMMSS format
	
	set datetime = $zdatetime($h,8)
	
	quit $tr(datetime,"/: ")
]]></Implementation>
</Method>

<Method name="readFile">
<FormalSpec>file:%String</FormalSpec>
<Implementation><![CDATA[

	Set stream=##class(%FileCharacterStream).%New()
	Set stream.Filename = file
	
	//mapeo automatico Omega 3000
	
	do ..Maptest("TestMap")
	do ..Maptest("OriginMap")
	do ..Maptest("MedServMap")

	// read counter
	set i = 1
	
	While 'stream.AtEnd 
	{
		Set line = stream.ReadLine()
		
		// check if file contains ASTM
		if (i = 1)	{	set ..isHL7 = ..checkHL7(line)		}
		
		// if file is HL7, process it
		if (..isHL7)
		{
			// get the record type
			set linetype = $piece(line,"|")
			set fieldcount = $length(line,"|")
			
			set ackcontrol=0
			
			//** parse lines and build arrays

			// H record
			if (linetype = "MSH")	{	do ..parseMSH(line,fieldcount)		}
	
			// P record
			if (linetype = "PID")	{
			
			
			 set idpac=$piece($piece(line,"|",4),"^",1)
			 set nnpac=$piece(line,"|",6)
			 set sexpac=$piece(line,"|",9)
			 
			 set w=0
			 
			 if ((idpac ="") || (nnpac ="")||(sexpac ="")){
				 
				 set w=1
				 set ^logdata("Error AE - Tira PID")="Faltan datos en Tira PID"
				 do ..NCK("PID",0)
				 }
			 
		     do ..parsePID(line,fieldcount) 
			
			}
			
			
			// O record
			if (linetype = "ORC")	{
			 set pet=$piece(line,"|",5)
			 set serviciomedico=$piece(line,"|",18)
			 set unidadejecutora=$piece($piece(line,"|",22),"^",1)
			 
			 if ((pet ="") || (serviciomedico ="")||(unidadejecutora ="")){
				 
				 set w=1
				 set ^logdata("Error AE - Tira ORC")="Faltan datos en Tira ORC"
				 if (pet '=""){set petid=pet}else{set petid=0}
				 
				 do ..NCK("ORC",petid)
				 }	
					
			if (pet'="" ){
			do ..parseORC(line,fieldcount)
			}
			}
			
			
			// OBR record
			if (linetype = "OBR")	 {	
			
			 set idtest=$piece(line,"|",2)
			 set testcode=$piece($piece(line,"|",5),"^",1)
			 
			if ((idtest ="") || (testcode ="")){
				 
				 set w=1
				 set ^logdata("Error AE - Tira OBR")="Faltan datos en Tira OBR"
				 
				 do ..NCK("OBR",petid)
				 }
			
			
			do ..parseOBR(line,fieldcount)
					
					}
		
		}
		
		set i = i + 1				
	}
	
	if (w=0){do ..NCK("ACK",pet)}
]]></Implementation>
</Method>

<Method name="parseMSH">
<FormalSpec>line:%String,fieldcount:%Integer</FormalSpec>
<Implementation><![CDATA[
	// @params: 	line		.........	currently read line of the file
	// 				fieldcount	.........	number of "|" (pipe) characters in the line
		
	set i = 1
	
	// save entire line
	set ..recordMSH = line
	
	while (i <= fieldcount)
	{
		set fieldvalue = $piece(line,"|",i)
		
		set ..fieldsMSH(i) = fieldvalue
		
		set i = i + 1
	}
	
	do ..setHeaderData()
]]></Implementation>
</Method>

<Method name="setHeaderData">
<Implementation><![CDATA[
	// set host id
	set ..host = ..fieldsMSH(3)
]]></Implementation>
</Method>

<Method name="parsePID">
<FormalSpec>line:%String,fieldcount:%Integer</FormalSpec>
<Implementation><![CDATA[
	// @params: 	line		.........	currently read line of the file
	// 				fieldcount	.........	number of "|" (pipe) characters in the line
		
	set i = 1
	
	// save entire line
	set ..recordPID = line
	
	while (i <= fieldcount)
	{
		set fieldvalue = $piece(line,"|",i)
		
		set ..fieldsPID(i) = fieldvalue
		
		set i = i + 1
	}
	
	//set patient demographics
	do ..setPatientDemographics()
]]></Implementation>
</Method>

<Method name="parseORC">
<FormalSpec>line:%String,fieldcount:%Integer</FormalSpec>
<Implementation><![CDATA[
	// @params: 	line		.........	currently read line of the file
	// 				fieldcount	.........	number of "|" (pipe) characters in the line
		
	set i = 1
	
	// save entire line
	set ..recordORC = line
	
	while (i <= fieldcount)
	{
		set fieldvalue = $piece(line,"|",i)
		
		set ..fieldsORC(i) = fieldvalue
		
		;set ^debug($h,"ORC"_i)=fieldvalue
		
		if (i=5){
		set pet=fieldvalue
		}
		
		//Validacion y creacion de doctor
		if (i=11){
			
		set doctorid=$piece(fieldvalue,"^",1)
		if (doctorid '= ""){
		set doctor=^LUFAC(doctorid)
		set a=0
			if (doctor '= ""){set a=1}
			
			if (a=0){
				set ^LUFACN($piece(fieldvalue,"^",2),$piece(fieldvalue,"^",1))=""
			    set ^LUFAC($piece(fieldvalue,"^",1))=$piece(fieldvalue,"^",2)
			    set ^logdata(pet,doctorid)="Doctor "_$piece(fieldvalue,"^",2)_" creado en la global ^LUFACN con id:"_$piece(fieldvalue,"^",1)
			    set ..doctor =$piece(fieldvalue,"^",2)
			    set ..codigodoctor =$piece(fieldvalue,"^",1)
			}
			
			if (a=1){
		        set ..doctor =$piece(fieldvalue,"^",2)
		        set ..codigodoctor =$piece(fieldvalue,"^",1)
		        }
		}

	   }
	   
	   
	   if (i=22){
		   
		 set s=1  
			
		set unidadid=$piece(fieldvalue,"^",1)
		
		if (unidadid '= ""){
			
		if (($data(^LUORI(unidadid)))){set unidad=unidadid}else{set unidad=""}	
		
			if (unidad = ""){set s=0}
			
			if (s=0){
				set ^LUORIN($piece(fieldvalue,"^",2),$piece(fieldvalue,"^",1))=""
			    set ^LUORI($piece(fieldvalue,"^",1))=$piece(fieldvalue,"^",2)
			    set ^logdata(pet,unidadid)="Unidad "_$piece(fieldvalue,"^",2)_" creado en la global ^LORI con id:"_$piece(fieldvalue,"^",1)
			}
			
		}

	   }			
		
		set i = i + 1
		
		
	}
	
	// set patient demographics
	do ..setPatientDemographics()
]]></Implementation>
</Method>

<Method name="parseOBR">
<FormalSpec>line:%String,fieldcount:%Integer</FormalSpec>
<Implementation><![CDATA[
	// @params: 	line		.........	currently read line of the file
	// 				fieldcount	.........	number of "|" (pipe) characters in the line
	
	// init counter
	set i = 1
	
	// save entire line
	set ..recordOBR = line
	
	// get field counter
	set counter = $piece(line,"|",2)
	
	// do until fieldcount reached
	while (i <= fieldcount)
	{
		// control fallback if sequence number is not provided
		if (counter = "")	{	set counter = i 	}
		
		// parse each field
		set fieldvalue = $piece(line,"|",i)
		
		// set OBR field
		set ..fieldsOBR(counter,i) = fieldvalue
		
		if (i=5){
		
		set p=1
		set testcode=$piece(fieldvalue,"^",1)
		//si no existe creo prueba
	    if (testcode '= ""){
		    
		if (($data(^LUPRO(testcode)))){set testcodeid=testcode}else{set testcodeid=""}	
		
			if (testcodeid = ""){set p=0}
			
			if (p=0){
				set h="T"_$piece($ZTIMESTAMP,".",2)_counter
				set ^LUPRON(h,$piece(fieldvalue,"^",1))=""
			    set ^LUPRO($piece(fieldvalue,"^",1))=h_"#"_$piece(fieldvalue,"^",2)_"#1#1#0###1#####8#####0#S######N#N#1###N#N"
			    set ^LUPRO($piece(fieldvalue,"^",1),0,999)="50#200####"
			    set ^logdata(h,testcode)="Prueba "_$piece(fieldvalue,"^",2)_" creado en la global ^LUPRO con id:"_$piece(fieldvalue,"^",1)
			}
			
		}
		
			
		//log pruebas	
		;set ^debug($h,"Campo "_counter_"-"_i)=fieldvalue
		
		do ..setTests(testcode,counter)
		}

		
		set i = i + 1
		
	}
	
	



 do ..setPatientDemographics()
]]></Implementation>
</Method>

<Method name="setPatientDemographics">
<Implementation><![CDATA[
	
	
	
	// required properties
	if (($data(..fieldsORC(5))) & (..requestno = "")) 	{ set ..requestno = ..fieldsORC(5)}	
	if ($data(..fieldsPID(4))) 	{ set ..patientid = $piece(..fieldsPID(4),"^",1) 	}
	if ($data(..fieldsPID(4)))	{ set ..dob = $Extract(..fieldsPID(8),1,8)						}
	if ($data(..fieldsPID(9)))	{ set ..sex = ..setSex(..fieldsPID(9))				}
	;if ($data(..fieldsOBR(6)))	{ set ..priority = ..fieldsOBR(6)					}
	
	
	
	
	// set the following properties according to mappings
	if ($data(..fieldsORC(22)))	{ set ..origin = $piece(..fieldsORC(22),"^",1)} ;##class(OMGMAP.OriginMap).getOmgCode(..fieldsORC(16))			}
	if ($data(..fieldsORC(1)))	{ set ..patienttype ="A"} ;##class(OMGMAP.PatTypeMap).getOmgCode(..fieldsORC(17))	}
	if ($data(..fieldsORC(18)))	{ set ..medicalservice =..fieldsORC(18) } ;##class(OMGMAP.MedServMap).getOmgCode(..fieldsORC(18))	}

	
	// Note: set to an empty field on purpose since it will not be used for this customer
	set ..dx = "" ;..fieldsPID(22)
	set ..motive = ""
	set ..bed = ""
	set ..episode = ""
	set ..observation = ""
	
	// ** Request Date
	
	// date & time
	if ($data(..fieldsORC(10)))
	{
		set ..requestdatetime = ..fieldsORC(10)
		do ..setRequestDateTime(..fieldsORC(10))		
	}

	
	// ** Names
	if ($data(..fieldsPID(6)))
	{
		set ..fullname = ..fieldsPID(6)
		do ..setNames(..fieldsPID(6))	
	}
	
	// ** log errors and warnings
	if (..medicalservice = "") 	{ do ##class(OMGMAP.Log).logEvent(130,2,..recordPID) }
	if (..patienttype = "") 	{ do ##class(OMGMAP.Log).logEvent(120,2,..recordPID) }
	if (..origin = "") 			{ do ##class(OMGMAP.Log).logEvent(110,2,..recordPID) }
]]></Implementation>
</Method>

<Method name="setNames">
<FormalSpec>rawname</FormalSpec>
<Implementation><![CDATA[
	// @params: 	rawname	.................	name field extracted from ASTM (including composite delimeters)
	// @output: 	setting of firstname, middlename, and lastname properties
	
	set ..firstname = $piece(rawname,"^",2)
    set ..lastname = $piece(rawname,"^",1)
	//set ..middlename = $piece(rawname,"^",2)
]]></Implementation>
</Method>

<Method name="setRequestDateTime">
<FormalSpec>datetime</FormalSpec>
<Implementation><![CDATA[
	// @params: 	datetime	.........	date & time field from ASTM file
	// @output: 	setting of request date properties: requestdate and requesttime (including ":" separators)
	
	// date (first 8 digits)
	set ..requestdate = $extract(datetime,1,8)
	
	// time (last 6 digits in pairs separated by a ":")
	set ..requesttime = $extract(datetime,9,10)_":"_$extract(datetime,11,12)_":"_$extract(datetime,13,14)
]]></Implementation>
</Method>

<Method name="setTests">
<FormalSpec>testcode:%Integer,counter:%Integer</FormalSpec>
<Implementation><![CDATA[
	// @params: 	line 	........	O line text
	
	set actioncode="A"
	
	set ^debug($h,"OmegaCode",counter)=testcode
	
	// set testcode property according to mapping
	set finaltestcode = ##class(OMGMAP.TestMap).getExtCode(testcode)
	set ..tests(counter,"action") = actioncode
	set ..tests(counter,"testcode") = testcode
	
	set ^debug($h,"actioncode")=actioncode
	set ^debug($h,"finaltestcode")=testcode
	
	// log errors and warnings
	;if (finaltestcode = "") { do ##class(OMGMAP.Log).logEvent(100,3,line) }
]]></Implementation>
</Method>

<Method name="setSex">
<FormalSpec>sex</FormalSpec>
<Implementation><![CDATA[
	// @params: 	sex		........	sex code received from external system
	// @output: 	Omega compatible sex code:	0 - General
	// 											1 - Man
	// 											2 - Woman
	
	//quit $select(sex="M":1,sex="F":2,sex="":0)
	
	// no change
	quit sex
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//line As %String, counter As %Integer

]]></Content>
</UDLText>

<Method name="errorlog">
<FormalSpec>code:%Integer,type:%Integer,info:%String</FormalSpec>
<Implementation><![CDATA[
	
	do ##class(OMGMAP.Log).logEvent(code,type,info)
]]></Implementation>
</Method>

<Method name="NCK">
<FormalSpec>T:%String,pet:%Integer</FormalSpec>
<Implementation><![CDATA[
	
	set folder = $p($g(^WCONF("P",413)),"#",2)
	set fileack = folder_"\ACK_"_T_"_"_pet_"_AE.res"
	
	set datetime =$tr( $zdatetime($h,8),"/: ")
	
	set ..recordMSH = "MSH|^~\&|ROCHE|ROCHE|HIS|HIS|"_datetime_"|ACK^ACK^ACK|ID"_datetime_"|P|2.5"
	if (T="PID"){
	set ..recordMSA = "MSA|AE|"_pet_"|Error en Datos Paciente"
	}
	
	if (T="ORC" && pet=0){
	set ..recordMSA = "MSA|AE|"_pet_"|Falta Numero Peticion"
	}
	
	if (T="ORC" && pet'=0){
	set ..recordMSA = "MSA|AE|"_pet_"|Falta datos unidad ejecutora o servicio medico"
	}
	
	if (T="OBR"){
	set ..recordMSA = "MSA|AE|"_pet_"|Falta datos id linea o codigo de prueba"
	}
	
	if (T="ACK"){
	set ..recordMSA = "MSA|AA|"_pet_"|OK"
	set fileack = folder_"\ACK_"_pet_".res"
	}
		// create file
	Set file=##class(%File).%New(fileack)
	Do file.Open("WSN")
	
	Do file.WriteLine(..recordMSH)
	Do file.WriteLine(..recordMSA)
]]></Implementation>
</Method>

<Method name="Maptest">
<FormalSpec>Map:%String</FormalSpec>
<Implementation><![CDATA[
	
 Set delete=##class(%ResultSet).%New("%DynamicQuery:SQL")    
 Set sa=delete.Prepare("DELETE FROM OMGMAP."_Map)
 Set sa=delete.Execute()
 
 Set key = $Order(^LUPRON(""))
 While (key '= "") {
 
     Set cod = $Order(^LUPRON(key,""))
     Set result=##class(%ResultSet).%New("%DynamicQuery:SQL")    
     Set sa=result.Prepare("INSERT INTO OMGMAP."_Map_" (ID,extcode,omgcode) VALUES (?,?,?)")
     Set sa=result.Execute(cod,key,cod)
     Set key = $Order(^LUPRON(key))
     
     
 }
 w "Mapeo "_Map_" Listo" ,!
]]></Implementation>
</Method>
</Class>
</Export>
